package homework2nd;

@SuppressWarnings("unused")
public class Task6 {
public static void main(String[] args) {
	long millisBeforeStringSum = System.currentTimeMillis();
	String s1 = "Восемь лет назад я принимал участие в проектировании и разработке сервиса, который был должен обслуживать запросы пользователей"
			+ "со всех уголков земного шара и координировать их действия. Работая над проектом я понял, что очень часто многие важные аспекты работы"
			+ "со временем просто игнорируются. Иногда это действительно не очень критично: если сервис локален и им пользуются только на определенной"
			+ "территории, либо пользователи естественным образом разделены на почти не взаимодействующие между собой географические кластеры. Однако же,"
			+ "если сервис объединяет пользователей по всему миру, то без четкого понимания принципов работы со временем уже не обойтись. Представим сервис,"
			+ "в котором общие события (совещания например) начинаются в какое-то строго определенное время, а пользователи рассчитывают на это. Какое время"
			+ "им показывать, в какой момент их беспокоить уведомлениями, что такое день рождения и когда можно поздравить человека — в статье я попробую это осмыслить. ";
	
	String sumString = s1;
	sumString += "Статья не претендует на глубину и/или академичность. Это попытка систематизировать опыт и обратить внимание разработчиков на не очень очевидные аспекты."
			+ "В JDK8 появилось новое Date Time API, в котором появилось множество новых полезных классов, но я не буду его упоминать, также как и об отличных сторонних"
			+ "библиотеках. Это отдельная, большая тема, которая заслуживает отдельной статьи; плюс, как я уже упомянул, я стараюсь рассказывать не о какой-то конкретной"
			+ "технологии, а о принципах работы в целом, а в этом плане новое API принципиально ничем не отличается от старого.";
	sumString += "Прямо тут начинаются разные вопросы. Идет ли время всегда в одном направлении? Идет ли оно равномерно? Непрерывно ли оно? Что принять за"
			+ "единичный вектор? Едина ли эта ось для всех? Зависит ли от положения в пространстве? От скорости движения? Каков минимально измеряемый отрезок? "
			+ "Собственно тут я готов только задавать вопросы, но никак не отвечать на них. Есть мнение, что никакого времени нет, но я также пока не готов к "
			+ "обсуждению этого вопроса. Но есть и уже решенные моменты. ";
	sumString += "Расстояние от Москвы до Вашингтона составляет примерно 7840000 метров и свет проходит это расстояние по поверхности земли минимум за 0.026 секунды,"
			+ " что совсем немало. Запрос на создание учетной записи пользователем во Владивостоке, будет отработан на московском сервере только через некоторое время."
			+ "Таким образом информация о происходящих событиях доступна совсем не сразу и зависит от расстояния между точками в пространстве.";
	sumString += "Текущая стандартная библиотека обработки времени на Java считает, что никаких релятивистских эффектов не существует и никто не движется на около-световых"
			+ " скоростях, а ось времени одна и едина для всех (по крайней мере в масштабах одной планеты) — и это вполне всех нас устраивает. Возможно впоследствии"
			+ " в JDK #6543 будет реализован новый Java Date Time API, который позволит написать сервис для внутренней офисной системы «Сокола Тысячелетия» с учетом скорости "
			+ "его движения и наличия/отсутствия кротовых нор рядом.";
		
	long millisAfterStringSum = System.currentTimeMillis();
	//System.out.println(sumString);
	System.out.println("Время затраченное на сложение вышеуказанных строк с помощью 'String' составляет:" + (millisAfterStringSum - millisBeforeStringSum) + " мс");
	
	long millisBeforeStringBuilderSum = System.currentTimeMillis();
	StringBuilder sb1 = new StringBuilder("Восемь лет назад я принимал участие в проектировании и разработке сервиса, который был должен обслуживать запросы пользователей"
			+ "со всех уголков земного шара и координировать их действия. Работая над проектом я понял, что очень часто многие важные аспекты работы"
			+ "со временем просто игнорируются. Иногда это действительно не очень критично: если сервис локален и им пользуются только на определенной"
			+ "территории, либо пользователи естественным образом разделены на почти не взаимодействующие между собой географические кластеры. Однако же,"
			+ "если сервис объединяет пользователей по всему миру, то без четкого понимания принципов работы со временем уже не обойтись. Представим сервис,"
			+ "в котором общие события (совещания например) начинаются в какое-то строго определенное время, а пользователи рассчитывают на это. Какое время"
			+ "им показывать, в какой момент их беспокоить уведомлениями, что такое день рождения и когда можно поздравить человека — в статье я попробую это осмыслить. ");
	StringBuilder sb2 = new StringBuilder("Статья не претендует на глубину и/или академичность. Это попытка систематизировать опыт и обратить внимание разработчиков на не очень очевидные аспекты."
			+ "В JDK8 появилось новое Date Time API, в котором появилось множество новых полезных классов, но я не буду его упоминать, также как и об отличных сторонних"
			+ "библиотеках. Это отдельная, большая тема, которая заслуживает отдельной статьи; плюс, как я уже упомянул, я стараюсь рассказывать не о какой-то конкретной"
			+ "технологии, а о принципах работы в целом, а в этом плане новое API принципиально ничем не отличается от старого.");
	StringBuilder sb3 = new StringBuilder("Прямо тут начинаются разные вопросы. Идет ли время всегда в одном направлении? Идет ли оно равномерно? Непрерывно ли оно? Что принять за"
			+ "единичный вектор? Едина ли эта ось для всех? Зависит ли от положения в пространстве? От скорости движения? Каков минимально измеряемый отрезок? "
			+ "Собственно тут я готов только задавать вопросы, но никак не отвечать на них. Есть мнение, что никакого времени нет, но я также пока не готов к "
			+ "обсуждению этого вопроса. Но есть и уже решенные моменты. ");
	StringBuilder sb4 =new StringBuilder("Расстояние от Москвы до Вашингтона составляет примерно 7840000 метров и свет проходит это расстояние по поверхности земли минимум за 0.026 секунды,"
			+ " что совсем немало. Запрос на создание учетной записи пользователем во Владивостоке, будет отработан на московском сервере только через некоторое время."
			+ "Таким образом информация о происходящих событиях доступна совсем не сразу и зависит от расстояния между точками в пространстве. .");
	StringBuilder sb5 = new StringBuilder("Текущая стандартная библиотека обработки времени на Java считает, что никаких релятивистских эффектов не существует и никто не движется на около-световых"
			+ " скоростях, а ось времени одна и едина для всех (по крайней мере в масштабах одной планеты) — и это вполне всех нас устраивает. Возможно впоследствии"
			+ " в JDK #6543 будет реализован новый Java Date Time API, который позволит написать сервис для внутренней офисной системы «Сокола Тысячелетия» с учетом скорости "
			+ "его движения и наличия/отсутствия кротовых нор рядом.");
	sb1.append(sb2);
	sb1.append(sb3);
	sb1.append(sb4);
	sb1.append(sb5);
	long millisAfterStringBuilderSum = System.currentTimeMillis();
	System.out.println("Время затраченное на сложение вышеуказанных строк с помощью 'StringBuilder' составляет:" + (millisAfterStringBuilderSum - millisBeforeStringBuilderSum) + " мс");
}
}
